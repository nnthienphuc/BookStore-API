@page "/"
@using System.Text.Json;

@using BookStoreWebAppFE.Services
@using BookStoreWebAppFE.Models
@inject IAuthenticationService authenticationService
@inject NavigationManager navigationManager
@inject HttpClient Http
@rendermode InteractiveServer

<div class="d-flex align-items-center custom-toast-background">
	<DxToastProvider Name="Overview"
	MaxToastCount="5"
	AnimationType="ToastAnimationType.Slide"
	HorizontalAlignment="HorizontalAlignment.Right"
	VerticalAlignment="VerticalEdge.Top"
	DisplayTime="TimeSpan.FromSeconds(5)"
	Width="320px" />
</div>
<div class="container" id="container" style="margin: 10px;">
	<div class="form-container sign-up-container">
		<EditForm  OnSubmit="@OnSignUpClick" FormName="SignUpform" EditContext="editContext" >
			<DataAnnotationsValidator />
			<ValidationSummary />
			<h1>Create Account</h1>
			<div class="social-container">
				<a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
				<a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
				<a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
			</div>
			<span>or use your email for registration</span>
			<InputText id="familyName" type="text" placeholder="Family Name" @bind-Value="staffModel.FamilyName" />
			<InputText id="givenName" type="text" placeholder="Given Name" @bind-Value="staffModel.GivenName" />
			<InputText id="address" type="text" placeholder="Address" @bind-Value="staffModel.Address" />
			<InputText id="staffEmail" type="email" placeholder="Email" @bind-Value="staffModel.Email" />
			<InputText id="phone" type="number" placeholder="Phone" @bind-Value="staffModel.Phone" />
			<InputText id="citizenId" type="text" placeholder="Citizen Identification" @bind-Value="staffModel.CitizenIdentification" />
			<InputText id="staffPassword" type="password" placeholder="Password" @bind-Value="staffModel.Password" />
			<InputText id="confirmPassword" type="password" placeholder="Password Confirm" @bind-Value="staffModel.ConfirmPassword" />
			<button type="submit">Sign Up</button>
		</EditForm>
	</div>
	<div class="form-container sign-in-container">
		<EditForm OnSubmit="@OnSignInClick" FormName="SignInform" EditContext="editContext2">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<h1>Sign in</h1>
			<div class="social-container">
				<a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
				<a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
				<a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
			</div>
			<span>or use your account</span>
			<InputText id="email" placeholder="Email" @bind-Value="@loginModel.Email" />
			<InputText id="password" type="password"placeholder="Password"  @bind-Value="@loginModel.Password" />
			<a @onclick="(()=>ShowResetPopup())">Reset Password</a>
			<button type="submit">Sign In</button>
		</EditForm>
	</div>
	<div class="overlay-container">
		<div class="overlay">
			<div class="overlay-panel overlay-left">
				<h1>Welcome Back!</h1>
				<p>To keep connected with us please login with your personal info</p>
				<button class="ghost" id="signIn" @onclick="(()=>PannelActive())">Sign In</button>
			</div>
			<div class="overlay-panel overlay-right">
				<h1>Hello, Friend!</h1>
				<p>Enter your personal details and start journey with us</p>
				<button class="ghost" id="signUp" @onclick="(()=>PannelActive())">Sign Up</button>
			</div>
		</div>
	</div>
</div>

<footer>
	<p>
		Created with <i class="fa fa-heart"></i> by
		<a target="_blank" href="https://florin-pop.com">Ngan</a>
	</p>
</footer>
<DxPopup @bind-Visible="@isResetPopupVisible"
ShowCloseButton="true"
ShowHeader="true"
HeaderText="Reset Password"
Width="400px"
CloseOnOutsideClick="true">
	<div class="m-2" style="width:100%;">
		<DxFormLayout >
			<DxFormLayoutItem Caption="Email:" CssClass="fullWidth">
				<DxTextBox @bind-Text="@resetEmail" />
			</DxFormLayoutItem>
		</DxFormLayout>
		<div class="text-end mt-3">
			<DxButton Text="Reset" Click="@ResetPassword" CssClass="me-2 delete HButton" />
			<DxButton Text="Cancel" Click="@(() => isResetPopupVisible = false)" CssClass="me-2 delete HButton" />
		</div>
	</div>
</DxPopup>

<style>

	@@import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');
	.fullWidth{
	width: 100% !important;
	}
	* {
	box-sizing: border-box;
	}

	body {
	background: #f6f5f7;
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
	font-family: 'Montserrat', sans-serif;
	height: 100vh;
	margin: -20px 0 50px;
	}

	h1 {
	font-weight: bold;
	margin: 0;
	}

	h2 {
	text-align: center;
	}

	p {
	font-size: 14px;
	font-weight: 100;
	line-height: 20px;
	letter-spacing: 0.5px;
	margin: 20px 0 30px;
	}

	span {
	font-size: 12px;
	}

	a {
	color: #333;
	font-size: 14px;
	text-decoration: none;
	margin: 15px 0;
	}

	button {
	border-radius: 20px;
	border: 1px solid rgb(6, 99, 100);
	background-color: rgb(6, 99, 100);
	color: #FFFFFF;
	font-size: 12px;
	font-weight: bold;
	padding: 12px 45px;
	letter-spacing: 1px;
	text-transform: uppercase;
	transition: transform 80ms ease-in;
	}

	button:active {
	transform: scale(0.95);
	}

	button:focus {
	outline: none;
	}

	button.ghost {
	background-color: transparent;
	border-color: #FFFFFF;
	}

	form {
	background-color: #FFFFFF;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 50px;
	height: 100%;
	text-align: center;
	}

	input {
	background-color: #eee;
	border: none;
	padding: 12px 15px;
	margin: 8px 0;
	width: 100%;
	}

	.container {
	background-color: #fff;
	border-radius: 10px;
	box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
	position: relative;
	overflow: hidden;
	width: 768px;
	max-width: 100%;
	min-height: 680px;
	}

	.form-container {
	position: absolute;
	top: 0;
	height: 100%;
	transition: all 0.6s ease-in-out;
	}

	.sign-in-container {
	left: 0;
	width: 50%;
	z-index: 2;
	}

	.container.right-panel-active .sign-in-container {
	transform: translateX(100%);
	}

	.sign-up-container {
	left: 0;
	width: 50%;
	opacity: 0;
	z-index: 1;
	}

	.container.right-panel-active .sign-up-container {
	transform: translateX(100%);
	opacity: 1;
	z-index: 5;
	animation: show 0.6s;
	}

	@@keyframes show {
	0%, 49.99% {
	opacity: 0;
	z-index: 1;
	}

	50%, 100% {
	opacity: 1;
	z-index: 5;
	}
	}

	.overlay-container {
	position: absolute;
	top: 0;
	left: 50%;
	width: 50%;
	height: 100%;
	overflow: hidden;
	transition: transform 0.6s ease-in-out;
	z-index: 100;
	}

	.container.right-panel-active .overlay-container {
	transform: translateX(-100%);
	}

	.overlay {
	background: rgb(6, 99, 100);
	background: -webkit-linear-gradient(to right, rgb(6, 99, 100), rgb(6, 99, 100));
	background: linear-gradient(to right, rgb(6, 99, 100), rgb(6, 99, 100));
	background-repeat: no-repeat;
	background-size: cover;
	background-position: 0 0;
	color: #FFFFFF;
	position: relative;
	left: -100%;
	height: 100%;
	width: 200%;
	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
	}

	.container.right-panel-active .overlay {
	transform: translateX(50%);
	}

	.overlay-panel {
	position: absolute;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 40px;
	text-align: center;
	top: 0;
	height: 100%;
	width: 50%;
	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
	}

	.overlay-left {
	transform: translateX(-20%);
	}

	.container.right-panel-active .overlay-left {
	transform: translateX(0);
	}

	.overlay-right {
	right: 0;
	transform: translateX(0);
	}

	.container.right-panel-active .overlay-right {
	transform: translateX(20%);
	}

	.social-container {
	margin: 20px 0;
	}

	.social-container a {
	border: 1px solid #DDDDDD;
	border-radius: 50%;
	display: inline-flex;
	justify-content: center;
	align-items: center;
	margin: 0 5px;
	height: 40px;
	width: 40px;
	}

	footer {
	background-color: #222;
	color: #fff;
	font-size: 14px;
	bottom: 0;
	position: fixed;
	left: 0;
	right: 0;
	text-align: center;
	z-index: 999;
	}

	footer p {
	margin: 10px 0;
	}

	footer i {
	color: red;
	}

	footer a {
	color: #3c97bf;
	text-decoration: none;
	}
</style>
<script>
	function PanelToggle() {
	const signUpButton = document.getElementById('signUp');
	const signInButton = document.getElementById('signIn');
	const container = document.getElementById('container');

	if (!signUpButton || !signInButton || !container) {
	console.warn("Auth toggle elements not found.");
	return;
	}

	signUpButton.addEventListener('click', () => {
	container.classList.add("right-panel-active");
	});

	signInButton.addEventListener('click', () => {
	container.classList.remove("right-panel-active");
	});
	}
</script>

@code {
	[Inject]
	public IJSRuntime JS { get; set; } = default!;
	[Inject] IToastNotificationService ToastService { get; set; }
	[SupplyParameterFromForm]
	public LoginModel loginModel { get; set; } = new();
	[SupplyParameterFromForm]
	public Staff staffModel { get; set; } = new();
	private EditContext editContext;
	private EditContext editContext2;
	private bool isResetPopupVisible = false;
	private string resetEmail = string.Empty;
	protected override void OnInitialized()
	{
		loginModel ??= new LoginModel();
		staffModel ??= new Staff();
		editContext = new EditContext(staffModel);
		editContext2 = new EditContext(loginModel);
	}

	//refactor by nnthienphuc
	async Task OnSignInClick()
	{
		try
		{
			var loginSuccess = await authenticationService.Login(loginModel.Email, loginModel.Password);

			if (loginSuccess)
			{
				navigationManager.NavigateTo("admin/book", forceLoad: true);
			}
			else
			{
				// Nếu thất bại, gọi lại API login để đọc message lỗi
				var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
				var errorMessage = await response.Content.ReadAsStringAsync();

				ToastService.ShowToast(new ToastOptions()
				{
					ProviderName = "Overview",
					ThemeMode = ToastThemeMode.Saturated,
					RenderStyle = ToastRenderStyle.Danger,
					Title = errorMessage ?? "Login failed. Please check your credentials."
				});
			}
		}
		catch (Exception ex)
		{
			ToastService.ShowToast(new ToastOptions()
			{
				ProviderName = "Overview",
				ThemeMode = ToastThemeMode.Saturated,
				RenderStyle = ToastRenderStyle.Danger,
				Title = $"System error: {ex.Message}"
			});
		}
	}

	async Task OnSignUpClick()
	{
		string result = await authenticationService.Register(staffModel);

		if (!result.StartsWith("Error"))
		{
			ToastService.ShowToast(new ToastOptions()
			{
				ProviderName = "Overview",
				ThemeMode = ToastThemeMode.Saturated,
				RenderStyle = ToastRenderStyle.Success,
				Title = $"{result}" // VD: "Registration successful. Please check your email to activate your account."
			});

			await Task.Delay(1000); // Cho người dùng thấy Toast 1 giây
			navigationManager.NavigateTo("/", forceLoad: true);
		}
		else
		{
			ToastService.ShowToast(new ToastOptions()
			{
				ProviderName = "Overview",
				ThemeMode = ToastThemeMode.Saturated,
				RenderStyle = ToastRenderStyle.Danger,
				Title = $"{result.Replace("Error: ", "")}" // Gọn gàng hơn
			});
		}

		StateHasChanged();
	}


	// async Task OnSignInClick()
	// {

	// 	if (await authenticationService.Login(loginModel.Email, loginModel.Password))
	// 	{
	// 		navigationManager.NavigateTo("admin/book", forceLoad: true);
	// 	}
	// 	StateHasChanged();
	// }

	// async Task OnSignUpClick()
	// {
	// 	string result = await authenticationService.Register(staffModel);
	// 	if (result.Contains("Register"))
	// 	{
	// 		ToastService.ShowToast(new ToastOptions()
	// 			{
	// 				ProviderName = "Overview",
	// 				ThemeMode = ToastThemeMode.Saturated,
	// 				RenderStyle = ToastRenderStyle.Success,
	// 				Title = $"{result}"
	// 			});
	// 	}
	// 	else
	// 	{
	// 		ToastService.ShowToast(new ToastOptions()
	// 			{
	// 				ProviderName = "Overview",
	// 				ThemeMode = ToastThemeMode.Saturated,
	// 				RenderStyle = ToastRenderStyle.Danger,
	// 				Title = $"{result}"
	// 			});
	// 	}
		
	// 	StateHasChanged();
	// }

	async void ShowResetPopup()
	{
		isResetPopupVisible = true;
	}
	async void PannelActive()
	{
		await JS.InvokeVoidAsync("PanelToggle");
	}
	async Task ResetPassword()
	{
		ResetPasswordDTO rs = new();
		rs.Email = resetEmail;
		var response = await Http.PostAsJsonAsync($"api/auth/reset-password", rs);
		var result = await response.Content.ReadFromJsonAsync<ApiMessageResponse>();
		if (response.IsSuccessStatusCode)
		{
			// ✅ Đọc nội dung trả về từ API

			ToastService.ShowToast(new ToastOptions() // SUCCESS
				{
					ProviderName = "Overview",
					ThemeMode = ToastThemeMode.Saturated,
					RenderStyle = ToastRenderStyle.Success,
					Title = $"{result?.Message}",
				});
		}
		else
		{
			if (string.IsNullOrEmpty(result?.Message))
			{
				string errorContent = await response.Content.ReadAsStringAsync();
				string allErrors = "";

				using (JsonDocument doc = JsonDocument.Parse(errorContent))
				{
					var errorsElement = doc.RootElement.GetProperty("errors");

					foreach (var property in errorsElement.EnumerateObject())
					{
						foreach (var error in property.Value.EnumerateArray())
						{
							allErrors += error.GetString() + "\n";
						}
					}
				}
				result.Message = allErrors;

			}
			ToastService.ShowToast(new ToastOptions() //ERROR
				{
					ProviderName = "Overview",
					ThemeMode = ToastThemeMode.Saturated,
					RenderStyle = ToastRenderStyle.Danger,
					Title = $"{result?.Message}"
				});
		}

	}
	public class ApiMessageResponse
	{
		public string Message { get; set; }
	}
	public class ResetPasswordDTO
	{
		public String Email { get; set; }
	}
}